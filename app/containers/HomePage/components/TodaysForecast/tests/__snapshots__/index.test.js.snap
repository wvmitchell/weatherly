exports[`<TodaysForecast /> should match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Card
    className="todays-weather"
    expandable={false}
    expanded={null}
    initiallyExpanded={false}>
    <CardHeader
        avatar={null}
        subtitle={undefined}
        title="some-place - a date" />
    <CardText>
        <h3>
            Currently
        </h3>
        <p>
            some-weather
            , 
            some-temp
        </p>
        <br />
        <h3>
            Today
        </h3>
        <p>
            description
        </p>
        <br />
        <h3>
            Tonight
        </h3>
        <p>
            description
        </p>
    </CardText>
</Card>,
  "nodes": Array [
    <Card
      className="todays-weather"
      expandable={false}
      expanded={null}
      initiallyExpanded={false}>
      <CardHeader
            avatar={null}
            subtitle={undefined}
            title="some-place - a date" />
      <CardText>
            <h3>
                  Currently
            </h3>
            <p>
                  some-weather
                  , 
                  some-temp
            </p>
            <br />
            <h3>
                  Today
            </h3>
            <p>
                  description
            </p>
            <br />
            <h3>
                  Tonight
            </h3>
            <p>
                  description
            </p>
      </CardText>
</Card>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <TodaysForecast
        conditions={
                Object {
                        "display_location": Object {
                          "full": "some-place",
                        },
                        "temperature_string": "some-temp",
                        "weather": "some-weather",
                      }
        }
        forecast={
                Object {
                        "simple": Object {
                          "forecastday": Array [
                            Object {
                              "date": Object {
                                "pretty": "a date",
                              },
                            },
                          ],
                        },
                        "txt": Object {
                          "forecastday": Array [
                            Object {
                              "fcttext": "description",
                            },
                            Object {
                              "fcttext": "description",
                            },
                          ],
                        },
                      }
        }
        getTempExtremesString={[Function]} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": TodaysForecast {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "conditions": Object {
            "display_location": Object {
              "full": "some-place",
            },
            "temperature_string": "some-temp",
            "weather": "some-weather",
          },
          "forecast": Object {
            "simple": Object {
              "forecastday": Array [
                Object {
                  "date": Object {
                    "pretty": "a date",
                  },
                },
              ],
            },
            "txt": Object {
              "forecastday": Array [
                Object {
                  "fcttext": "description",
                },
                Object {
                  "fcttext": "description",
                },
              ],
            },
          },
          "getTempExtremesString": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Card
          className="todays-weather"
          expandable={false}
          expanded={null}
          initiallyExpanded={false}>
          <CardHeader
                    avatar={null}
                    subtitle={undefined}
                    title="some-place - a date" />
          <CardText>
                    <h3>
                              Currently
                    </h3>
                    <p>
                              some-weather
                              , 
                              some-temp
                    </p>
                    <br />
                    <h3>
                              Today
                    </h3>
                    <p>
                              description
                    </p>
                    <br />
                    <h3>
                              Tonight
                    </h3>
                    <p>
                              description
                    </p>
          </CardText>
</Card>,
        "_debugID": 2,
        "_renderedOutput": <Card
          className="todays-weather"
          expandable={false}
          expanded={null}
          initiallyExpanded={false}>
          <CardHeader
                    avatar={null}
                    subtitle={undefined}
                    title="some-place - a date" />
          <CardText>
                    <h3>
                              Currently
                    </h3>
                    <p>
                              some-weather
                              , 
                              some-temp
                    </p>
                    <br />
                    <h3>
                              Today
                    </h3>
                    <p>
                              description
                    </p>
                    <br />
                    <h3>
                              Tonight
                    </h3>
                    <p>
                              description
                    </p>
          </CardText>
</Card>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <TodaysForecast
    conditions={
        Object {
            "display_location": Object {
              "full": "some-place",
            },
            "temperature_string": "some-temp",
            "weather": "some-weather",
          }
    }
    forecast={
        Object {
            "simple": Object {
              "forecastday": Array [
                Object {
                  "date": Object {
                    "pretty": "a date",
                  },
                },
              ],
            },
            "txt": Object {
              "forecastday": Array [
                Object {
                  "fcttext": "description",
                },
                Object {
                  "fcttext": "description",
                },
              ],
            },
          }
    }
    getTempExtremesString={[Function]} />,
}
`;
