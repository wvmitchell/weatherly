exports[`<ForecastCard /> should match the snapshot 1`] = `
ShallowWrapper {
  "complexSelector": ComplexSelector {
    "buildPredicate": [Function],
    "childrenOfNode": [Function],
    "findWhereUnwrapped": [Function],
  },
  "length": 1,
  "node": <Card
    className="upcoming-weather"
    raised={false}>
    <withStyles(CardHeader)
        avatar={
            <withStyles(Avatar)
                alt="some-name"
                src="some-path" />
        }
        subheader={undefined}
        title="sunday" />
    <withStyles(CardContent)>
        <withStyles(Typography)
            component="h3"
            type="headline">
            Conditions
        </withStyles(Typography)>
        <withStyles(Typography)
            type="body1" />
    </withStyles(CardContent)>
</Card>,
  "nodes": Array [
    <Card
      className="upcoming-weather"
      raised={false}>
      <withStyles(CardHeader)
            avatar={
                  <withStyles(Avatar)
                        alt="some-name"
                        src="some-path" />
            }
            subheader={undefined}
            title="sunday" />
      <withStyles(CardContent)>
            <withStyles(Typography)
                  component="h3"
                  type="headline">
                  Conditions
            </withStyles(Typography)>
            <withStyles(Typography)
                  type="body1" />
      </withStyles(CardContent)>
</Card>,
  ],
  "options": Object {},
  "renderer": ReactShallowRenderer {
    "_instance": ShallowComponentWrapper {
      "_calledComponentWillUnmount": false,
      "_compositeType": 1,
      "_context": Object {},
      "_currentElement": <ForecastCard
        day={0}
        forecast={
                Object {
                        "simple": Object {
                          "forecastday": Array [
                            Object {
                              "date": Object {
                                "weekday": "sunday",
                              },
                            },
                          ],
                        },
                        "txt": Object {
                          "forecastday": Array [
                            Object {
                              "icon": "some-name",
                              "icon_url": "some-path",
                            },
                          ],
                        },
                      }
        }
        getTempExtremesString={[Function]} />,
      "_debugID": 1,
      "_hostContainerInfo": null,
      "_hostParent": null,
      "_instance": ForecastCard {
        "_reactInternalInstance": [Circular],
        "context": Object {},
        "props": Object {
          "day": 0,
          "forecast": Object {
            "simple": Object {
              "forecastday": Array [
                Object {
                  "date": Object {
                    "weekday": "sunday",
                  },
                },
              ],
            },
            "txt": Object {
              "forecastday": Array [
                Object {
                  "icon": "some-name",
                  "icon_url": "some-path",
                },
              ],
            },
          },
          "getTempExtremesString": [Function],
        },
        "refs": Object {},
        "state": null,
        "updater": Object {
          "enqueueCallback": [Function],
          "enqueueCallbackInternal": [Function],
          "enqueueElementInternal": [Function],
          "enqueueForceUpdate": [Function],
          "enqueueReplaceState": [Function],
          "enqueueSetState": [Function],
          "isMounted": [Function],
          "validateCallback": [Function],
        },
      },
      "_mountOrder": 1,
      "_pendingCallbacks": null,
      "_pendingElement": null,
      "_pendingForceUpdate": false,
      "_pendingReplaceState": false,
      "_pendingStateQueue": null,
      "_renderedComponent": NoopInternalComponent {
        "_currentElement": <Card
          className="upcoming-weather"
          raised={false}>
          <withStyles(CardHeader)
                    avatar={
                              <withStyles(Avatar)
                                        alt="some-name"
                                        src="some-path" />
                    }
                    subheader={undefined}
                    title="sunday" />
          <withStyles(CardContent)>
                    <withStyles(Typography)
                              component="h3"
                              type="headline">
                              Conditions
                    </withStyles(Typography)>
                    <withStyles(Typography)
                              type="body1" />
          </withStyles(CardContent)>
</Card>,
        "_debugID": 2,
        "_renderedOutput": <Card
          className="upcoming-weather"
          raised={false}>
          <withStyles(CardHeader)
                    avatar={
                              <withStyles(Avatar)
                                        alt="some-name"
                                        src="some-path" />
                    }
                    subheader={undefined}
                    title="sunday" />
          <withStyles(CardContent)>
                    <withStyles(Typography)
                              component="h3"
                              type="headline">
                              Conditions
                    </withStyles(Typography)>
                    <withStyles(Typography)
                              type="body1" />
          </withStyles(CardContent)>
</Card>,
      },
      "_renderedNodeType": 1,
      "_rootNodeID": 0,
      "_topLevelWrapper": null,
      "_updateBatchNumber": null,
      "_warnedAboutRefsInRender": false,
    },
    "getRenderOutput": [Function],
    "render": [Function],
  },
  "root": [Circular],
  "unrendered": <ForecastCard
    day={0}
    forecast={
        Object {
            "simple": Object {
              "forecastday": Array [
                Object {
                  "date": Object {
                    "weekday": "sunday",
                  },
                },
              ],
            },
            "txt": Object {
              "forecastday": Array [
                Object {
                  "icon": "some-name",
                  "icon_url": "some-path",
                },
              ],
            },
          }
    }
    getTempExtremesString={[Function]} />,
}
`;
